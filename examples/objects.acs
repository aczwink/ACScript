let new_vec := (x, y) -> {
    x: x,
    y: y,

    //lengthSquared: { x, y } -> x * x + y * y
    lengthSquared: this -> null

    //+: ( this, { x, y } ) -> new_vec( ( this.x + x, this.y + y ) )

/*
    *: {
        //( { x, y }, scaleFactor) | scaleFactor is float64 -> new_vec( (x * scaleFactor, y * scaleFactor) ),
        ( this, other ) -> new_vec( ( this.x * other.x, this.y * other.y ) )
    }
*/
};

let v1 := new_vec( (5, 5) );
print(v1);
print(v1.lengthSquared());

let v2 := new_vec( (10, 12) );
print(v2);
print(v2.lengthSquared());

//print(v1 + v2);

/*
let square := x -> x * x;

let test := square(5);
print(test);

let vecTest := square(vec);
print(vecTest);
*/